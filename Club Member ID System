<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
<title>Club Member Identification System</title>
<style>
  /* Reset & base */
  * {
    box-sizing: border-box;
  }
  body, html {
    margin: 0; padding:0; height: 100%;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: #222428;
    color: #eee;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 600px;
    max-width: 350px;
    margin-left: auto;
    margin-right: auto;
    overflow: hidden;
  }
  #app {
    background: #2c2f33;
    border-radius: 12px;
    box-shadow: 0 8px 20px rgb(0 0 0 / 0.6);
    width: 100%;
    max-width: 350px;
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  header {
    padding: 15px 20px;
    background: #23272a;
    border-radius: 12px 12px 0 0;
    text-align: center;
    font-size: 1.4rem;
    font-weight: 700;
    letter-spacing: 1px;
    color: #43b581;
  }
  main {
    padding: 15px;
    flex: 1;
    overflow-y: auto;
  }
  /* Login Form */
  form {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  label {
    font-weight: 600;
    margin-bottom: 5px;
    font-size: 0.9rem;
  }
  input[type="text"], input[type="password"], input[type="number"] {
    padding: 10px;
    border-radius: 8px;
    border: none;
    font-size: 1rem;
  }
  input[type="text"]:focus, input[type="password"]:focus, input[type="number"]:focus {
    outline: 2px solid #43b581;
    background: #3a3d42;
    color: #fff;
  }
  button {
    padding: 12px;
    border: none;
    border-radius: 8px;
    background-color: #43b581;
    color: #fff;
    font-weight: 700;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  button:hover {
    background-color: #36a56d;
  }
  /* Member List */
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    color: #eee;
  }
  th, td {
    padding: 8px 6px;
    text-align: center;
    border-bottom: 1px solid #444;
    font-size: 0.9rem;
  }
  th {
    background-color: #23272a;
    font-weight: 600;
  }
  td input[type="number"] {
    width: 70px;
    padding: 6px;
    border-radius: 6px;
    border: none;
    background: #3a3d42;
    color: #eee;
    font-size: 0.9rem;
  }
  td input[type="number"]:focus {
    outline: 2px solid #43b581;
  }
  /* Responsive scroll */
  main::-webkit-scrollbar {
    width: 6px;
  }
  main::-webkit-scrollbar-thumb {
    background-color: #43b581;
    border-radius: 3px;
  }
  .info {
    font-size: 0.9rem;
    margin-top: 8px;
    color: #bbb;
  }
  .logout-btn {
    background-color: #f04747;
    margin: 10px 20px;
  }
  .logout-btn:hover {
    background-color: #cc3c3c;
  }
  /* Mobile friendly */
  @media (max-width: 350px) {
    body, html {
      max-width: 100vw;
      max-height: 600px;
    }
    #app {
      max-width: 100vw;
      max-height: 600px;
    }
  }
</style>
</head>
<body>
<div id="app">
  <header>Club Member ID System</header>
  <main id="main-content">
    <!-- Content inserted dynamically -->
  </main>
</div>
<script>
(() => {
  // Hardcoded users - username, password, role (admin/member), points
  const USERS = [
    { username: "admin", password: "admin123", role: "admin", points: 0 },
    { username: "alice", password: "alice123", role: "member", points: 120 },
    { username: "bob", password: "bob123", role: "member", points: 95 },
    { username: "charlie", password: "charlie123", role: "member", points: 75 },
    { username: "diana", password: "diana123", role: "member", points: 50 }
  ];

  const LOCAL_STORAGE_KEY = "club_members_data";
  const SESSION_USER_KEY = "club_member_loggedin";

  const app = document.getElementById("app");
  const mainContent = document.getElementById("main-content");

  // Save initial users data to localStorage if not exists
  function saveInitialData() {
    if (!localStorage.getItem(LOCAL_STORAGE_KEY)) {
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(USERS));
    }
  }
  // Get members data from localStorage
  function getMembersData() {
    let data = localStorage.getItem(LOCAL_STORAGE_KEY);
    if (data) {
      try {
        return JSON.parse(data);
      } catch {
        return [];
      }
    }
    return [];
  }
  // Save members data to localStorage
  function saveMembersData(data) {
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));
  }

  // Current logged in user
  function getCurrentUser() {
    const username = sessionStorage.getItem(SESSION_USER_KEY);
    if (!username) return null;
    const allUsers = getMembersData();
    return allUsers.find(u => u.username === username) || null;
  }

  // Save current logged in user to session
  function setCurrentUser(username) {
    sessionStorage.setItem(SESSION_USER_KEY, username);
  }
  // Clear current user from session (logout)
  function clearCurrentUser() {
    sessionStorage.removeItem(SESSION_USER_KEY);
  }

  // Sort members by points desc and generate ranking
  function generateRanking(members) {
    // Sort descending by points
    const sorted = [...members].sort((a, b) => b.points - a.points);
    // Assign rank
    let rank = 0;
    let lastPoints = null;
    let realRank = 0;
    for (let member of sorted) {
      realRank++;
      if (member.points !== lastPoints) {
        rank = realRank;
        lastPoints = member.points;
      }
      member.rank = rank;
    }
    return sorted;
  }

  // Render login form
  function renderLogin() {
    mainContent.innerHTML = `
      <form id="login-form" autocomplete="off">
        <label for="username">Username</label>
        <input type="text" id="username" required autocomplete="off" autofocus />
        <label for="password">Password</label>
        <input type="password" id="password" required autocomplete="off" />
        <button type="submit">Login</button>
      </form>
      <p class="info">Use credentials:<br>
      Admin: admin / admin123<br>
      Members: alice, bob, charlie, diana (password same as username + 123)</p>
    `;
    const form = document.getElementById("login-form");
    form.addEventListener("submit", e => {
      e.preventDefault();
      const username = form.username.value.trim();
      const password = form.password.value;
      handleLogin(username, password);
    });
  }
  // Handle login attempt
  function handleLogin(username, password) {
    const members = getMembersData();
    const user = members.find(u => u.username === username && u.password === password);
    if (!user) {
      alert("Invalid username or password");
      return;
    }
    setCurrentUser(user.username);
    renderDashboard();
  }
  // Logout
  function handleLogout() {
    clearCurrentUser();
    renderLogin();
  }

  // Render dashboard for logged in user
  function renderDashboard() {
    const user = getCurrentUser();
    if (!user) {
      renderLogin();
      return;
    }

    const members = getMembersData();
    const ranked = generateRanking(members);

    let content = `<p>Welcome, <strong>${user.username}</strong> (${user.role === 'admin' ? 'Admin' : 'Member'})</p>`;
    content += `<button class="logout-btn" id="logout-btn">Logout</button>`;

    content += `<table aria-label="Club Members List">
      <thead>
        <tr>
          <th>Rank</th>
          <th>Member</th>
          <th>Points</th>
        </tr>
      </thead>
      <tbody>`;

    ranked.forEach(member => {
      if (user.role === "admin") {
        // Admin can edit points
        content += `<tr>
          <td>${member.rank}</td>
          <td>${member.username}${member.username === user.username ? " (You)" : ""}</td>
          <td><input type="number" min="0" max="10000" step="1" data-username="${member.username}" value="${member.points}" aria-label="Points for ${member.username}" /></td>
        </tr>`;
      } else {
        // Members can only see points, theirs marked with "(You)"
        if (member.username === user.username) {
          content += `<tr>
            <td>${member.rank}</td>
            <td>${member.username} (You)</td>
            <td>${member.points}</td>
          </tr>`;
        }
      }
    });

    content += `</tbody></table>`;

    if (user.role !== "admin") {
      content += `<p class="info">You can only view your points and rank.</p>`;
    } else {
      content += `<p class="info">As Admin, you can update points by editing the numbers.</p>`;
    }

    mainContent.innerHTML = content;

    // Add logout btn event
    document.getElementById("logout-btn").addEventListener("click", handleLogout);

    // Admin input events for points update
    if (user.role === "admin") {
      const inputs = mainContent.querySelectorAll('input[type=number]');
      inputs.forEach(input => {
        input.addEventListener("change", e => {
          const username = e.target.getAttribute("data-username");
          const newPoints = parseInt(e.target.value);
          if (isNaN(newPoints) || newPoints < 0) {
            alert("Points must be a number 0 or greater");
            // reset to last known points
            const membersData = getMembersData();
            const member = membersData.find(m => m.username === username);
            e.target.value = member ? member.points : 0;
            return;
          }
          updateMemberPoints(username, newPoints);
        });
      });
    }
  }

  // Update points for a member
  function updateMemberPoints(username, newPoints) {
    const members = getMembersData();
    let changed = false;
    for (let member of members) {
      if (member.username === username) {
        member.points = newPoints;
        changed = true;
        break;
      }
    }
    if (changed) {
      saveMembersData(members);
      renderDashboard();
    }
  }

  // On load
  function init() {
    saveInitialData();
    if (getCurrentUser()) {
      renderDashboard();
    } else {
      renderLogin();
    }
  }

  // Start
  init();
})();
</script>
</body>
</html>
</content>
</create_file>
